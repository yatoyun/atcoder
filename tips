def main():
    

def ini(): return int(input())
def mapint(): return map(int, input().split())
def mapint0(): return map(lambda x: int(x)-1, input().split())
def mapstr(): return input().split()
def lint(): return list(map(int, input().split()))
def lint0(): return list(map(lambda x: int(x)-1, input().split()))
def lstr(): return list(input().rstrip())
def errprint(*x): return None if atcenv else print(*x, file=sys.stderr) 

if __name__=="__main__":
    import sys, os
    input = sys.stdin.readline
    atcenv = os.environ.get("ATCODER", 0)

    main()

| 排他的論理和は一つだけ他と違う値を見つけるのがとても簡単

x = 12
y = 10
z = 12

print(x ^ y ^ z)

>>10

| SortedSet
https://github.com/tatyam-prime/SortedSet

| 多項式計算
from numpy import poly1d

| dp bit仕様
240-c.py

| BFS, DFS っぽいの
277-c.py

| 値以上または値より大きい値の最小のindexを返す
https://www.kueharx.com/2021/05/cstdlowerboundpython.html

| 総当たり 足して xになる組み合わせ
ans_list = {0}
for a in map(int, input().split()):
    for b in [*ans_list]:
        ans_list.add(a+b)
|素数判定
def is_prime3(q,k=50):
    q = abs(q)
    #計算するまでもなく判定できるものははじく
    if q == 2: return True
    if q < 2 or q&1 == 0: return False

    #n-1=2^s*dとし（但しaは整数、dは奇数)、dを求める
    d = (q-1)>>1
    while d&1 == 0:
        d >>= 1

    #判定をk回繰り返す
    for i in xrange(k):
        a = random.randint(1,q-1)
        t = d
        y = pow(a,t,q)
        #[0,s-1]の範囲すべてをチェック
        while t != q-1 and y != 1 and y != q-1:
            y = pow(y,2,q)
            t <<= 1
        if y != q-1 and t&1 == 0:
            return False
    return True

